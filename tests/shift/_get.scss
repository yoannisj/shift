// =============================================================================
// =SHIFT TESTS - GET
// =============================================================================

@include describe('The shift-get function')
{
  @include it('should return a the value of a previously registered breakpoint')
  {
    @include should(expect( shift-get('width', 's') ), to(equal(420px)));
    @include should(expect( shift-get('width', 'm') ), to(equal(750px)));
    @include should(expect( shift-get('width', 'l') ), to(equal(1100px)));
  }

  @include it('should return the value of a previously registered tweakpoint')
  {
    @include should(expect( shift-get('width', 's') ), to(equal(420px)));
    @include should(expect( shift-get('width', 'm') ), to(equal(750px)));
    @include should(expect( shift-get('height', 's', 'foo') ), to(equal(600px)));
    @include should(expect( shift-get('height', 'm', 'foo') ), not-to(equal(900px)));
  }

  @include it('should consider unitless numbers as px values')
  {
    @include should(expect( shift-get('height', 's') ), to(equal(500px)));
    @include should(expect( shift-get('height', 'm') ), to(equal(700px)));
  }

  @include xit('should throw a warnig when no value was found')
  {
    @include should(expect( shift-get('width', 'xs') ), to(equal(null)));
    @include should(expect( shift-get('width', 'xl') ), to(equal(null)));
    @include should(expect( shift-get('height', 'l',' foo') ), to(equal(null)));
  }

  @include xit('should throw an error when not given a string as feature parameter')
  {
    @include should(expect( shift-get(true, 'm') ), to(equal(null)));
    @include should(expect( shift-get(10, 'm') ), to(equal(null)));
    @include should(expect( shift-get('hello' 'world', 'm') ), to(equal(null)));
  }

  @include xit('should throw an error when not given a string as feature parameter')
  {
    @include should(expect( shift-get(false, 'm') ), to(equal(null)));
    @include should(expect( shift-get(10, 'm') ), to(equal(null)));
    @include should(expect( shift-get('hello' 'wordl', 'm') ), to(equal(null)));
  }

  @include xit('should throw an error when not given a string as label parameter')
  {
    @include should(expect( shift-get('width', false) ), to(equal(null)));
    @include should(expect( shift-get('width', 10) ), to(equal(null)));
    @include should(expect( shift-get('width', 'hello' 'world') ), to(equal(null)));
  }

  @include xit('should throw an error when not given a string as tweakpoint parameter')
  {
    @include should(expect( shift-get('width', 's'), true ), to(equal(null)));
    @include should(expect( shift-get('width', 's'), false ), to(equal(null)));
    @include should(expect( shift-get('width', 'm'), 10 ), to(equal(null)));
    @include should(expect( shift-get('width', 'l', 'hello' 'world') ), to(equal(null)));
  }
}