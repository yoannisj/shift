// =============================================================================
// =SHIFT - LENGTH INTERVALS
// =============================================================================
////
//// @group shift-length
//// @author [Yoannis Jamar](http://yoannis.com)

@import "SassyLists";
@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/lists/walk";
@import "aleksi/maps/is-map";

@import "shift/length/parse";
@import "shift/breakpoint/list";

// =shift-length-intervals( $lengths )
// -----------------------------------------------------------------------------
/// Builds shift params for each 'min-/max-' interval between given media
/// widths/heights, and returns them in an ordered list (first width-only
/// intervals, then height-only and finally mixed intervals).
/// 
/// @param {map} $lengths - map of widths/heights to build intervals for
/// @return {list} - The ordered list of params representing intervals
///
/// @api private
/// @since 0.3.0

@function shift-length-intervals( $lengths: null )
{
  // memoization
  $_memo_: '_shift-length-intervals-#{$lengths}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // default to all registered breakpoint lengths
  @if $lengths == null
  {
    $lengths: (
      "widths": shift-list-values('width'),
      "heights": shift-list-values('height')
    );
  }

  // default to "width" lengths if list is given
  @if type-of($lengths) == 'list' {
    $lengths: ( 'widths': $lengths );
  }

  // sanitize '$lengths' argument
  @if not is-map-($lengths) {
    @return throw-error('shift-length-intervals(): $length must be a map â€“ was #{inspect($length)}');
  }

  @if not map-has-key($lengths, 'widths') and not map-has-key($lengths, 'heights') {
    @return throw-error('shift-length-intervals(): no lengths found under "widths" or "heights" in #{inspect($lengths)}');
  }

  // get list of lengths, and parse them to allow for breakpoint labels
  $widths: walk(map-get($lengths, 'widths'), 'shift-parse-length', 'width');
  $heights: walk(map-get($lengths, 'heights'), 'shift-parse-length', 'height');

  // remove all null values and sort values in ascending order
  $widths: sl-sort(sl-purge($widths));
  $heights: sl-sort(sl-purge($heights));

  // build list of parameters for each interval
  $total-w: length($widths);
  $total-h: length($heights);

  $w-params: ();
  $h-params: ();
  $params: ();

  @if $total-w > 0
  {
    // add 'max-' only params at the beginning
    $max-w-prm: ('max-width': nth($widths, 1));
    $w-params: append($w-params, $max-w-prm);
    $params: append($params, $max-w-prm);

    // add params for each 'min-' 'max-' interval
    @for $i from 1 to $total-w
    {
      $min-w: nth($widths, $i);
      $max-w: nth($widths, $i + 1);
      $prm: ('min-width': $min-w, 'max-width': $max-w);

      $w-params: append($w-params, $prm);
      $params: append($params, $prm);
    }

    // add 'min-' only params at the end
    $min-w-prm: ('min-width': nth($widths, $total-w));
    $w-params: append($w-params, $min-w-prm);
    $params: append($params, $min-w-prm);
  }

  @if $total-h > 0
  {
    // add 'max-' only params at the beginning
    $max-h-prm: ('max-height': nth($heights, 1));
    $h-params: append($h-params, $max-h-prm);
    $params: append($params, $max-h-prm);

    // add params for each 'min-' 'max-' interval
    @for $i from 1 to $total-h
    {
      $min-h: nth($heights, $i);
      $max-h: nth($heights, $i + 1);
      $prm: ('min-height': $min-h, 'max-height': $max-h);

      $h-params: append($h-params, $prm);
      $params: append($params, $prm);
    }

    // add 'min-' only params at the end
    $min-h-prm: ('min-height': nth($heights, $total-h));
    $h-params: append($h-params, $min-h-prm);
    $params: append($params, $min-h-prm);
  }

  // add mixed length params
  @if $total-w > 0 and $total-h > 0
  {
    @each $w-prm in $w-params
    {
      @each $h-prm in $h-params
      {
        $prm: map-merge($w-prm, $h-prm);
        $params: append($params, $prm);
      }
    }
  }

  @return memo-set('shift', $_memo_, $params);
}