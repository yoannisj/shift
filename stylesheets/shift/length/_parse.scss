// =============================================================================
// =SHIFT - LENGTH PARSE
// =============================================================================

@import "aleksi/general/throw";
@import "aleksi/general/memo";
@import "aleksi/cast/to-number";

@import "shift/setup";
@import "shift/breakpoint/get";
@import "shift/length/convert";

// =shift-parse-length( $value[, $feature, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Takes a length value/label and returns the corresponding unitless px length.
/// Returns `null` if a string was given but could not be cast to a number, nor
/// matched with a registered breakpoint label.
///
/// @param {string|number} $value - The length to parse
/// @param {string} $feature ['width'] - The feature to use when matching labels
/// @param {string} $tweakpoint [null] - The tweakpoint to use when matching labels
///
/// @return {number} - The unitless px length corresponding to $value
/// @throw Error - if $value is not a number nor a string
///
/// @api public
/// @since 0.3.0

@function shift-parse-length( $value, $feature: 'width', $tweakpoint: null )
{
  // memoization
  $_memo_: 'shift-parse-length-#{$value}-#{$feature}-#{$tweakpoint}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  $type: type-of($value);

  @if $type != 'string' and $type != 'number' {
    @return throw-error('shift-parse-length(): $value must be a number or a string â€“ was #{inspect($value)}.');
  }

  @if $type == 'string'
  {
    // try to cast length as a number in case it was given 'on the fly'
    // or try to match it with a registered label
    $value: default-to(to-number($value), shift-get($feature, $value, $tweakpoint));

    // if could not cast and no corresponding label was found
    @if $value == null {
      @return memo-set('shift', $_memo_, null);
    }
  }

  // convert to unitless px value
  $value: shift-convert-length($value, 'unitless');
  @return memo-set('shift', $_memo_, $value);
}