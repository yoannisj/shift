// =============================================================================
// =SHIFT - CONTEXT
// =============================================================================

@import "shift/context/set";
@import "shift/context/get";
@import "shift/context/save";
@import "shift/context/restore";

$__shift__: () !default;

// =Functions
// =============================================================================

// =shift-context([ $args... ])
// -----------------------------------------------------------------------------
/// Stores or fetches a property in current context. If a map is given, each key
/// will be used to store the corresponding value.
///
/// @param {string|list|map} $props - properties to store/fetch
/// @param {any} $val - value to set for given property name $prop
///
/// @return {map|any} - the current/stored value for given property/-ies
///
/// @api public
/// @since 0.1.0

@function shift-context($args...)
{
  $num-args: length($args);

  // if name and value is given for one or more properties
  @if ($num-args == 1 and type-of(nth($args, 1)) == 'map')
    or $num-args == 2
  {
    // store these into the current context
    @return shift-context-set($args...);
  }

  // else, retrieve current context properties
  @return shift-context-get($args...);
}

// =Mixins
// =============================================================================

// =shift-context([ $args... ])
// -----------------------------------------------------------------------------
/// Stores or fetches a property in current context. If a map is given, each key
/// will be used to store the corresponding value.
///
/// @param {string|list|map} $props - properties to store/fetch
/// @param {any} $val - value to set for given property name $prop
///
/// @return {map|any} - the current/stored value for given property/-ies
///
/// @api public
/// @since 0.1.0

@mixin shift-context($args...) {
  $context: shift-context($args...);
}
