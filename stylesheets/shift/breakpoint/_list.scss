// =============================================================================
// =SHIFT - LABELS
// =============================================================================

@import "aleksi/general/throw";
@import "aleksi/maps/map-get-deep";
@import "aleksi/maps/map-merge-deep";

@import "shift/config";

// shift-list-breakpoints( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns all breakpoints registered for given @media feature.
///
/// @param {string} $feature - The media-query feature to retrieve
/// @param {string} $tweakpoint [null] - Optionally retreive tweaked values
///
/// @return {map} - The registered breakpoints registered for $feature
/// @throw Error if `$feature` is not a string
/// @throw Error if `$tweakpoint` is not a string
///
/// @api public
/// @since 0.3.0

@function shift-list-breakpoints($feature, $tweakpoint: null)
{
  // sanitize `$feature`
  @if not type-of($feature) == 'string' {
    @return throw-error("shift-list-breakpoints(): `$feature` must be a string. Was #{inspect($feature)}.");
  }

  // sanitize `$tweakpoint`
  @if $tweakpoint != null and type-of($tweakpoint) != 'string' {
    @return throw-error("shift-list-breakpoints(): `$tweakpoint` must be a string. Was #{inspect($tweakpoint)}.");
  }

  // remove 'min-' and 'max-' from feature name
  $feature: str-remove(str-remove($feature, 'min-'), 'max-');

  // get all breakpoints registered for given feature
  $breakpoints: default-to(map-get-deep($__shift__, 'breakpoints', $feature), ());

  // optionally override with tweaked breakpoint values
  @if $tweakpoint
  {
    $tweakpoints: default-to(map-get-deep($__shift__, 'tweakpoints', $feature), ());
    $breakpoints: map-merge-deep($breakpoints, $tweakpoints);
  }

  @return $breakpoints;
}

// shift-breakpoints( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// @alias shift-list-breakpoints

@function shift-breakpoints( $feature, $tweakpoint: null )
{
  @return shift-list-breakpoints($feature, $tweakpoint);
}

// shift-list-labels( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns the labels of all breakpoints registered for given @media feature.
///
/// @param {string} $feature - The media-query feature to retrieve
///
/// @return {list} - The list of labels registered for $feature
/// @throw Error if `$feature` is not a string
///
/// @api public
/// @since 0.3.0

@function shift-list-labels($feature)
{
  // sanitize `$feature`
  @if not type-of($feature) == 'string' {
    @return throw-error("shift-list-values(): `$feature` must be a string. Was #{inspect($feature)}.");
  }

  // get all breakpoints/tweakpoints registered for given feature
  $breakpoints: shift-list-breakpoints($feature);

  // return list of labels registered under the given feature
  @return map-keys($breakpoints);
}

// shift-labels( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// @alias shift-list-labels

@function shift-labels( $feature, $tweakpoint: null )
{
  @return shift-list-labels($feature, $tweakpoint);
}

// shift-list-values( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns the values of all breakpoints registered for given @media feature.
///
/// @param {string} $feature - The media-query feature to retrieve
/// @param {string} $tweakpoint [null] - Optionally retreive tweaked values
///
/// @return {list} - The list of values registered for $feature
/// @throw Error if `$feature` is not a string
/// @throw Error if `$tweakpoint` is not a string
///
/// @api public
/// @since 0.3.0

@function shift-list-values($feature, $tweakpoint: null)
{
  // sanitize `$feature`
  @if not type-of($feature) == 'string' {
    @return throw-error("shift-list-values(): `$feature` must be a string. Was #{inspect($feature)}.");
  }

  // sanitize `$tweakpoint`
  @if $tweakpoint != null and type-of($tweakpoint) != 'string' {
    @return throw-error("shift-list-values(): `$tweakpoint` must be a string. Was #{inspect($tweakpoint)}.");
  }

  // get all breakpoints/tweakpoints registered for given feature
  $breakpoints: shift-list-breakpoints($feature, $tweakpoint);

  // return list of values registered under the given feature
  @return map-values($breakpoints);
}

// shift-values( $feature[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// @alias shift-list-values

@function shift-values( $feature, $tweakpoint: null )
{
  @return shift-list-values($feature, $tweakpoint);
}
