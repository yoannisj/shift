// =============================================================================
// =SHIFT - GET
// =============================================================================

@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/general/default-to";
@import "aleksi/strings/str-remove";
@import "aleksi/maps/map-merge-deep";

@import "shift/setup";
@import "shift/breakpoint/list";

$__shift-suppress-get-warnings__: false !default;

// =shift-get( $feature, $label[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns the media-query feature value set for the given label and
/// tweakpoint.
/// **Note:** Unitless values are considered as pixel values. This is so they
/// can be more easily shared with js scripts.
///
/// @param {string} $feature - The media-query feature to retrieve
/// @param {string} $label - The label of the value to retrieve
/// @param {string} $tweakpoint [null] - Optional tweakpoint from which to get the value
///
/// @return {any} - The corresponding value
/// @throw Error if `$feature` is not a string
/// @throw Error if `$label` is not a string
/// @throw Error if `$tweakpoint` is not a string
/// @throw Warning if no value was found
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.1.0

@function shift-get( $feature, $label, $tweakpoint: null )
{
  // memoization
  $_memo_: 'shift-get-#{$feature}-#{$label}-#{$tweakpoint}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // sanitize `$feature`
  @if type-of($feature) != 'string' {
    @return throw-error("shift-get(): `$feature` must be a string – was `#{inspect($feature)}`");
  }

  // sanitize `$label`
  @if type-of($label) != 'string' {
    @return throw-error("shift-get(): `$label` must be a string – was `#{inspect($label)}`");
  }

  // sanitize `$tweakpoint`
  @if $tweakpoint != null and type-of($tweakpoint) != 'string' {
    @return throw-error("shift-get(): `$tweakpoint` must be a string – was `#{inspect($tweakpoint)}`");
  }

  // remove 'min-' and 'max-' from feature name
  $feature-core: str-remove(str-remove($feature, 'min-'), 'max-');

  // retrieve all breakpoints that were registered
  $breakpoints: shift-list-breakpoints($feature-core, $tweakpoint);

  // in order to find registered value
  $value: map-get($breakpoints, $label);

  @if $value == null
  {
    // throw a warning if no value was found
    @if not $__shift-suppress-get-warnings__ {
      $_: throw-warning("shift-get(): no #{$feature} value was found for `#{$label}`");
    }

    @return memo-set('shift', $_memo_, null);
  }

  // consider unitless numbers as px values
  @if type-of($value) == 'number' and unitless($value) {
    $value: 1px * $value;
  }

  @return memo-set('shift', $_memo_, $value);
}

// =shift-get-width( $label[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns the registered width for the given label and tweakpoint.
///
/// @param {string} $label - The label of the value to retrieve
/// @param {string} $tweakpoint [null] - Optional tweakpoint to look in
///
/// @return {number} - The corresponding width value
/// @throw Warning if no value was found
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.1.0

@function shift-get-width( $label, $tweakpoint: null ) {
  @return shift-get('width', $label, $tweakpoint);
}

// =shift-get-height( $label[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Returns the registered height for the given label and tweakpoint.
///
/// @param {string} $label - The label of the value to retrieve
/// @param {string} $tweakpoint [null] - Optional tweakpoint to look in
///
/// @return {number} - The corresponding height value
/// @throw Warning if no value was found
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.1.0

@function shift-get-height( $label, $tweakpoint: null ) {
  @return shift-get('height', $label, $tweakpoint);
}