// =============================================================================
// =SHIFT - PARSE
// =============================================================================

@import "sassy-maps";
@import "aleksi/general/throw";
@import "aleksi/general/const";
@import "aleksi/general/default-to";
@import "aleksi/strings/str-explode";

@import "shift/config";
@import "shift/constants";
@import "shift/expression";
@import "shift/get";

// =shift-parse( $params[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Takes a shift expression or a map of media-query parameters and returns a
/// new map of media-query parameters, including defaults and with labeled
/// features replaced by their registered values.
///
/// @param {string|map} $params - A shift expression or a map of media-query parameters
/// @param {string} $tweakpoint - An optional tweakpoint to get values from
///
/// @return {map} - A map of media-query parameters with corresponding values
/// @throw Description
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.1.0
///
/// @TODO: implement memoization for performance

@function shift-parse( $params, $tweakpoint: null )
{
  // parse expression if params is given as a string
  @if type-of($params) == 'string' {
    $params: _shift-parse-expression($params);
  }

  // merge with defaults
  $params: map-merge((
    'strict-query': $shift-strict-queries,
    'media-type': $shift-media-type
  ), $params);

  $labels: ();

  // get labeled feature values, and adapt to tweakpoint
  @each $feature, $value in map-remove($params, 'strict-mode', 'media-type')
  {
    // recognize labeled values
    @if type-of($value) == 'string'
      and not str-index($feature, '-label')
    {
      // conserve labels in parameters
      $labels: map-set($labels, '#{$feature}-label', $value);
      // replace labeled values with breakpoint values
      $params: map-set($params, $feature, shift-get($feature, $value, $tweakpoint));
    }
  }

  @return map-merge($labels, $params);
}

// =_shift-parse-expression( $expr )
// -----------------------------------------------------------------------------
/// Parses a shift expression and returns a map of media-query settings and
/// features, with their corresponding values. Delegates to `shift-length`
/// in order to retrieve length values from the given expression.
///
/// @param {string} $expr - The expression to parse
/// @return {map} - Media-query settings and features with corresponding values
///
/// @example scss
///   Example Code
///
/// @access private
/// @since 0.1.0
///
/// @TODO: implement memoization for performance

@function _shift-parse-expression( $expr )
{
  // accept an empty string
  @if str-length($expr) == 0 {
    @return ();
  }

  // initialize map of parameters
  $params: ();

  // normalize expression in order to support multiple syntaxes
  $expr: shift-normalize-expression($expr);

  // identify media-query settings described in the expression
  @each $part in str-explode($expr, ' ')
  {
    // recognize 'only' keyword
    @if $part == 'only' {
      $params: map-set($params, 'strict-query', true);
    }

    // recognize 'media-type'
    @else if index(const('SHIFT_MEDIA_TYPES'), $part) {
      $params: map-set($params, 'media-type', $part);
    }

    // recognize 'min-width' feature
    @else if str-index($part, 'w>') {
      $params: map-set($params, 'min-width', str-slice($part, 3));
    }

    // recognize 'max-width' feature
    @else if str-index($part, 'w<') {
      $params: map-set($params, 'max-width', str-slice($part, 3));
    }

    // recognize 'min-height' feature
    @else if str-index($part, 'h>') {
      $params: map-set($params, 'min-height', str-slice($part, 3));
    }

    // recognize 'max-height' feature
    @else if str-index($part, 'h<') {
      $params: map-set($params, 'max-height', str-slice($part, 3));
    }
  }

  @return $params;
}
