// =============================================================================
// =SHIFT - PARSE
// =============================================================================

@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/general/const";
@import "aleksi/general/default-to";
@import "aleksi/cast/to-number";
@import "aleksi/strings/str-explode";
@import "aleksi/maps/map-set";

@import "shift/constants";
@import "shift/params/expression";
@import "shift/params/handle";
@import "shift/breakpoint/get";
@import "shift/length/parse";

// =shift-parse( $params[, $tweakpoint ])
// -----------------------------------------------------------------------------
/// Takes a shift expression, handle or a map of shift parameters, and returns a
/// new map of parameters, with breakpoint labels and length values parsed.
///
/// @param {string|map} $params - A shift expression or a map of media-query parameters
/// @param {string|null} $tweakpoint - An optional tweakpoint to get values from
///
/// @return {map} - A map of shift parameters, with values parsed
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.1.0

@function shift-parse( $params, $tweakpoint: null )
{
  // memoization
  $_memo_: 'shift-parse-#{$params}-#{$tweakpoint}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // sanitize $params argument
  @if type-of($params) != 'string' and is-map($params) == false {
    @return throw-error('shift-parse(): `$params` must be a map or a string – was `#{inspect($params)}`');
  }

  // sanitize $tweakpoint argument
  @if $tweakpoint != null and type-of($tweakpoint) != 'string' {
    @return throw-error('shift-parse(): `$tweakpoint` must be null or a string – was `#{inspect($tweakpoint)}`');
  }

  // parse expression/handle if params is given as a string
  @if type-of($params) == 'string'
  {
    // allow () or 'df' or emtpy string
    @if $params == () or $params == 'df' or $params == '' {
      @return memo-set('shift', $_memo_, ());
    }

    @else if shift-validate-expression($params) {
      $params: _shift-parse-expression($params, $tweakpoint);
    }

    @else if shift-validate-handle($params) {
      $params: _shift-parse-handle($params, $tweakpoint);
    }
  }

  // get labeled feature values, and adapt to tweakpoint
  // parse length values
  $length-params: map-remove($params, 'strict', 'media', 'resolution');
  @each $feature, $value in $length-params
  {
    // parse length value
    $length: shift-parse-length($value, $feature, $tweakpoint);
    // replace with parsed value in parameters map
    $params: map-set($params, $feature, $length);
  }

  @return memo-set('shift', $_memo_, $params);
}

// =_shift-parse-expression( $expr )
// -----------------------------------------------------------------------------
/// Parses a shift expression and returns a map of media-query settings and
/// features, with their corresponding values.
///
/// @param {string} $expr - The expression to parse
/// @return {map} - Media-query settings and features with corresponding values
///
/// @example scss
///   Example Code
///
/// @access private
/// @since 0.1.0

@function _shift-parse-expression( $expr, $tweakpoint: null )
{
  // memoization
  $_memo_: '_shift-parse-expression-#{$expr}';
  @if memo-has('_shift', $_memo_) {
    @return memo-get('_shift', $_memo_);
  }

  // initialize map of parameters
  $params: ();

  // accept 'df' and empty string
  @if $expr == 'df' or $expr == '' {
    @return memo-set('_shift', $_memo_, $params);
  }

  // normalize expression in order to support multiple syntaxes
  $expr: shift-normalize-expression($expr);

  // recognize leading 'only' keyword for strict queries
  @if str-index($expr, 'only') == 1
  {
    $params: map-set($params, 'strict', true);
    $expr: str-slice($expr, 5);
  }

  // identify media-query settings described in the expression
  @each $part in str-explode($expr, ' ')
  {
    // recognize 'media'
    @if index(const('SHIFT_MEDIA_TYPES'), $part) {
      $params: map-set($params, 'media', $part);
    }

    // recognize 'min-width' feature
    @else if str-index($part, 'w>') {
      $length: shift-parse-length(str-slice($part, 3), 'width', $tweakpoint);
      $params: map-set($params, 'min-width', $length);
    }

    // recognize 'max-width' feature
    @else if str-index($part, 'w<') {
      $length: shift-parse-length(str-slice($part, 3), 'width', $tweakpoint);
      $params: map-set($params, 'max-width', $length);
    }

    // recognize 'min-height' feature
    @else if str-index($part, 'h>') {
      $length: shift-parse-length(str-slice($part, 3), 'height', $tweakpoint);
      $params: map-set($params, 'min-height', $length);
    }

    // recognize 'max-height' feature
    @else if str-index($part, 'h<') {
      $length: shift-parse-length(str-slice($part, 3), 'height', $tweakpoint);
      $params: map-set($params, 'max-height', $length);
    }
  }

  @return memo-set('_shift', $_memo_, $params);
}

// =_shift-parse-handle( $handle )
// -----------------------------------------------------------------------------
/// Parses a shift handle and returns a map of media-query settings and
/// features, with their corresponding values. Delegates to `shift-length`
/// in order to retrieve length values from the given expression.
///
/// @param {string} $handle - The handle to parse
/// @return {map} - Media-query settings and features with corresponding values
///
/// @example scss
///   Example Code
///
/// @access private
/// @since 0.3.0

@function _shift-parse-handle( $handle, $tweakpoint: null )
{
  // memoization
  $_memo_: '_shift-parse-handle-#{$handle}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // initialize map of parameters with defaults
  $params: ();

  // accept 'df' and empty string
  @if $handle == 'df' or $handle == '' {
    @return memo-set('shift', $_memo_, $params);
  }

  // loop over parts of combined handles
  $fcount: 1;
  @each $feature in str-explode($handle, '-')
  {
    // recognize the breakpoint feature's dimension ('width' or 'height')
    $dimen: if($fcount == 1, 'width', 'height');

    $pcount: 1;
    @each $part in str-explode($feature, '_')
    {
      // recognize the breakpoint feature's limit ('min' or 'max')
      $limit: if($pcount == 1, 'min', 'max');
      // get the breakpoint feature's length value
      $length: if($part == '', null, shift-parse-length($part, $dimen, $tweakpoint));

      @if $feature != '' and $part != '' {
        // register the breakpoint parameter
        $params: map-set($params, '#{$limit}-#{$dimen}', $length);
      }

      $pcount: $pcount + 1;
    }

    $fcount: $fcount + 1;
  }

  @return memo-set('shift', $_memo_, $params);
}
