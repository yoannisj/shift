// =============================================================================
// =SHIFT - VARIABLE SCOPE
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "sassy-maps";
@import "aleksi/general/default-to";

@import "shift/config";
@import "shift/context";
@import "shift/params/expression";
@import "shift/variable/validate";
@import "shift/variable/parse-keys";
@import "shift/variable/transpose";

// =Functions
// =============================================================================

// =shift-scope-variable( $var[, $context ])
// -----------------------------------------------------------------------------
/// Limits a shift-variable to the scope of given context. Keys that are out of
/// scope are removed, and keys overlapping context scope are limited to fit in.
/// **Note**: If a regular variable is given, it will be wrapped in a shift
/// variable using the context as single key.
///
/// @param $var - the shift variable to re-scope
/// @param $context [shift-context()] - the context features to use as scope
///
/// @throw Error - if $var is not a valid shift variable
/// @return {map} - the map of keys -> parsed features
///
/// @api public
/// @since 0.3.0
///
/// @todo: implement memoization for increased performance

@function shift-scope-variable( $var, $context: shift-context() )
{
  // get context's scoping features
  $media: default-to(map-get($context, 'media'), $shift-media-type);
  $min-w: map-get($context, 'min-width');
  $max-w: map-get($context, 'max-width');
  $min-h: map-get($context, 'min-height');
  $max-h: map-get($context, 'max-height');

  // initialize scoped copy of variable
  $scoped: ();

  // if regular key was given
  @if not shift-validate-variable($var) {
    // return a shift variable with scope as only key
    $scoped-key: shift-expression($context);
    @return map-set($scoped, $scoped-key, $var);
  }

  // get shift params for each key
  $params: shift-parse-keys($var);

  @each $key, $val in $var
  {
    $prm: map-get($params, $key);
    $prm-media: default-to(map-get($prm, 'media-type'), $shift-media-type);
    $prm-min-w: map-get($prm, 'min-width');
    $prm-max-w: map-get($prm, 'max-width');
    $prm-min-h: map-get($prm, 'min-height');
    $prm-max-h: map-get($prm, 'max-height');

    // if key is out of context's scope
    @if $media != $prm-media
      or ($prm-min-w != null and $prm-min-w >= default-to($max-w, 999999))
      or ($prm-max-w != null and $prm-max-w < default-to($min-w, 0))
      or ($prm-min-h != null and $prm-min-h >= default-to($max-h, 999999))
      or ($prm-max-h != null and $prm-max-h < default-to($min-h, 0))
    {
      // don't add this value to scoped copy of variable
    }

    @else
    {
      // limit keys that overlap with context's scope
      @if default-to($prm-min-w, 0) < default-to($min-w, 0) {
        $prm: map-set($prm, 'min-width', $min-w);
      }

      @if default-to($prm-max-w, 999999) > default-to($max-w, 999999) {
        $prm: map-set($prm, 'max-width', $max-w);
      }

      @if default-to($prm-min-h, 0) < default-to($min-h, 0) {
        $prm: map-set($prm, 'min-height', $min-h);
      }

      @if default-to($prm-max-h, 999999) > default-to($max-h, 999999) {
        $prm: map-set($prm, 'max-height', $max-h);
      }

      // add value to scoped copy of variable
      $scoped-key: shift-expression($prm);
      $scoped: map-set($scoped, $scoped-key, $val);
    }
  }

  // return scoped copy of variable
  @return $scoped;
}