// =============================================================================
// =SHIFT - VARIABLE PARSE KEYS
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/maps/map-set";

@import "shift/variable/validate";
@import "shift/params/parse";

// =shift-parse-keys( $var )
// -----------------------------------------------------------------------------
/// Parses each key in given shift variable, and returns a map pairing each key
/// with the parsed features it defines.
///
/// @param $var - the shift variable to parse
///
/// @throw Error - if $var is not a valid shift variable
/// @return {map} - the map of keys -> parsed features
///
/// @api public
/// @since 0.3.0

@function shift-parse-keys( $var )
{
  // memoization
  $_memo_: 'shift-parse-keys-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // this only works on valid shift variables
  @if not shift-validate-variable($var) {
    @return throw-error('shift-parse-keys(): $var must be a valid shift variable â€“ was #{inspect($var)}.');
  }

  $params: ();
  @each $key, $val in $var {
    $params: map-set($params, $key, shift-parse($key));
  }

  @return memo-set('shift', $_memo_, $params);
}
