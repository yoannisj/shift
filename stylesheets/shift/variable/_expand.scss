// =============================================================================
// =SHIFT - VARIABLE EXPAND
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "SassyLists";
@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/lists/walk";

@import "shift/length/intervals";
@import "shift/params/expression";
@import "shift/variable/validate";
@import "shift/variable/parse-keys";
@import "shift/variable/key-lengths";
@import "shift/variable/transpose";

// =Functions
// =============================================================================

// =shift-expand-variable( $var )
// -----------------------------------------------------------------------------
/// Expands a given shift variable, staggering keys to cover all possible width
/// and/or height intervals.
///
/// @param $var - the shift variable to re-scope
/// @param $context [shift-context()] - the context features to use as scope
///
/// @throw Error - if $var is not a valid shift variable
/// @return {map} - the map of keys -> parsed features
///
/// @api public
/// @since 0.3.0

@function shift-expand-variable( $var )
{
  // memoization
  $_memo_: 'shift-expand-variable-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  @if not shift-validate-variable($var) {
    @return throw-error('shift-expand-variable(): `$var` must be a valid shift variable â€“ was `#{inspect($var)}`');
  }

  // get ordered length intervals from variable's keys
  $lengths: shift-key-lengths($var);
  $intervals: shift-length-intervals($lengths);

  $keys: list-walk($intervals, 'shift-expression');

  $keys: ();
  @each $prm in $intervals {
    $keys: append($keys, shift-expression($prm));
  }

  $res: shift-transpose-variable($var, $keys);
  @return memo-set('shift', $_memo_, $res);
}
