// =============================================================================
// =SHIFT - VARIABLE CALL
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/default-to";
@import "aleksi/general/default-to";

@import "shift/context";
@import "shift/params/parse";
@import "shift/variable/parse-keys";

// =_shift-computed-value( $var[, $context ])
// -----------------------------------------------------------------------------
/// Returns the last value from a shift variable that corresponds to given
/// context. Assuming that the variable's values are output in the same order in
/// the final CSS, this is the value computed in the browser at given context.
/// **Note:** This is only reliable if $context interval does not overlap the
/// intervals in the variable's keys. Define $context with the functions
/// 'shift-parse-key-lengths' and 'shift-length-intervals' to make sure it
/// defines the smallest interval possible.
///
/// @param {map} $var - the shift variable to retreive the value from
/// @param {map} $context - the shift context for which to retreive the value
///
/// @api private
/// @since 0.3.0

@function _shift-computed-value( $var, $context: shift-context() )
{
  // sanitize `$var`
  @if not shift-validate-variable($var) {
    @return throw-error('_shift-computed-value(): `$var` must be a valid shift variable â€“ was #{inspect($var)}`');
  }

  // parse given context for labeled values
  $context: shift-parse($context);

  // extract default value
  $df: map-get($var, 'df');
  $var: map-remove($var, 'df');

  // optimize for default context
  @if $context == () {
    @return $df;
  }

  // get context feature values
  $media: default-to(map-get($context, 'media'), $shift-media-type);
  $min-w: default-to(map-get($context, 'min-width'), 0);
  $max-w: default-to(map-get($context, 'max-width'), 999999);
  $min-h: default-to(map-get($context, 'min-height'), 0);
  $max-h: default-to(map-get($context, 'max-height'), 999999);

  // loop over other keys in reverse order, and get first value that fits
  $params: shift-parse-keys($var);
  $keys: map-keys($var);
  $i: length($var);

  @while $i > 0
  {
    $key: nth($keys, $i);
    $prm: map-get($params, $key);

    $prm-media: default-to(map-get($prm, 'media'), $shift-media-type);
    $prm-min-w: default-to(map-get($prm, 'min-width'), 0);
    $prm-max-w: default-to(map-get($prm, 'max-width'), 999999);
    $prm-min-h: default-to(map-get($prm, 'min-height'), 0);
    $prm-max-h: default-to(map-get($prm, 'max-height'), 999999);

    // if context is in key's scope
    @if $media == $prm-media
      and $min-w >= $prm-min-w
      and $max-w <= $prm-max-w
      and $min-h >= $prm-min-h
      and $max-h <= $prm-max-h
    {
      // return its value
      @return map-get($var, $key);
    }

    $i: $i - 1;
  }

  // return default value (can be 'null')
  @return $df;
}