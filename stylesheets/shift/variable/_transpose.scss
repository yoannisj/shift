// =============================================================================
// =SHIFT - VARIABLE TRANSPOSE
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/memo";
@import "aleksi/general/throw";
@import "aleksi/general/default-to";
@import "aleksi/maps/map-set";

@import "shift/context";
@import "shift/params/parse";
@import "shift/variable/validate";
@import "shift/variable/parse-keys";
@import "shift/variable/computed-value";

// =Functions
// =============================================================================

// =shift-transpose-variable( $var, $keys )
// -----------------------------------------------------------------------------
/// Transforms a shift variable, by using the given list of keys and the values
/// that correspond in the original variable.
///
/// @throw Error - if $var is not a valid shift variable
/// @return {map} - transformed variable, using given keys
///
/// @api public
/// @since 0.3.0

@function shift-transpose-variable($var, $keys)
{
  // memoization
  $_memo_: 'shift-transpose-variable-#{$var}-#{$keys}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  @if not shift-validate-variable($var) {
    @return throw-error('shift-transpose-variable(): $var must be a valid shift variable â€“ was #{inspect($var)}.');
  }

  // $params: shift-parse-keys($var);
  $res: ();

  @each $key in $keys
  {
    $val: _shift-computed-value($var, shift-parse($key));
    $res: map-set($res, $key, $val);
  }

  @return memo-set('shift', $_memo_, $res);
}
