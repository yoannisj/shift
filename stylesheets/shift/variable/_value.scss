// =============================================================================
// =SHIFT - VARIABLE VALUE
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/memo";
@import "aleksi/general/default-to";
@import "aleksi/general/css-rule";
@import "aleksi/lists/some";
@import "aleksi/maps/map-walk-values";
@import "aleksi/arglists/arglist-prepend";

@import "shift/config";
@import "shift/context";
@import "shift/query";
@import "shift/params/validate";
@import "shift/params/parse";
@import "shift/variable/validate";
@import "shift/variable/scope";
@import "shift/variable/call";

// =Functions
// =============================================================================

// =shift-value( $var[, $context, $fn, $args... ])
// -----------------------------------------------------------------------------
/// Returns the value(s) from a shift variable that correspond to given context.
/// **Note**: if a regular variable is given, that will be returned as is.
///
/// @param {map|any} $var - The shift variable to get value(s) from
/// @param {map} $context - The shift context for which to get value(s)
/// @param {string} $fn ['__none__'] - Optional function to call on values
/// @param {arglist} $args... - Optional additional parameters for $fn

@function shift-value( $var, $context: shift-context(), $fn: '__none__', $args... )
{
  // memoization
  $_memo_: 'shift-value-#{$var}-#{$context}-#{$fn}-#{$args}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // allow omitting the $context argument
  @if not shift-validate-params($context)
  {
    $args: if($fn != '__none__', arglist-prepend($args, $fn), $args);
    $fn: $context;
    $context: shift-context();
  }

  // optimize if only regular variables were given
  @if not shift-validate-variable($var)
    and not some($args, 'shift-validate-variable')
  {
    $res: if($fn == '__none__', $var, call($fn, $var, $args... ));
    @return memo-set('shift', $_memo_, $res);
  }

  // parse given context for labeled values
  $context: shift-parse($context);

  // optionally transform variable with given function
  @if $fn != '__none__'
  {
    // add var to arguments, so they can be aligned and scoped together
    $args: arglist-prepend($args, $var);
    // and use 'shift-call'
    $var: shift-call($fn, $context, $args...);
  }

  @else {
    // scope variable to given context
    $var: shift-scope-variable($var, $context);
  }

  // check for the amount of values that were returned
  $var-ln: length($var);

  // return null if no value resulted
  @if $var-ln == 0 {
    @return memo-set('shift', $_memo_, null);
  }

  // if only one value resulted
  @if $var-ln == 1
  {
    $val-key: nth(map-keys($var), 1);
    $val-context: shift-parse($val-key);

    // and it corresponds to given context exactly
    @if $val-context == $context {
      // return it as a regular value
      @return memo-set('shift', $_memo_, map-get($var, $val-key));
    }
  }

  @return memo-set('shift', $_memo_, $var);
}

// =Mixins
// =============================================================================

// =shift-value( $prop, $var[, $important, $fn, $args... ])
// -----------------------------------------------------------------------------
/// Outputs styles for a given css property and corresponding values from a
/// shift variable, scoped into current context and wrapped in media-queries.
///
/// @param {string} $prop - The css property to output
/// @param {map} $var - The shift variable to use as value
/// @param {bool} $important [false] - Whether to append the `!important` flag or not
/// @param {string} $fn ['__none__'] - Optional function to call to resulting values
/// @param {arglist} $args... - Optional additional parameters for $fn
///
/// @example scss
///   Example Code
///
/// @access public
/// @since 0.3.0

@mixin shift-value($prop, $var, $important: false, $fn: '__none__', $args... )
{
  // allow omitting the $important argument
  @if type-of($important) == 'string'
  {
    $args: if($fn != '__none__', arglist-prepend($args, $fn), $args);
    $fn: $important;
    $important: false;
  }

  // get value for current context, and optionally transformed by given function
  $var: shift-value($var, shift-context(), $fn, $args...);

  // allow regular variables
  @if not shift-validate-variable($var) {
    #{$prop}: css-value($var, $important);
  }

  @else
  {
    // reduce variable before outputting it
    $var: shift-reduce-variable($var);

    @each $key, $val in $var
    {
      $params: shift-parse($key);
      $context: shift-context();

      @if $params == $context {
        #{$prop}: css-value($val, $important);
      }

      @else
      {
        @at-root (without: media)
        {
          @include shift-query($params)
          {
            #{$prop}: css-value($val, $important);
          }
        }
      }
    }
  }
}