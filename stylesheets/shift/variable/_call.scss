// =============================================================================
// =SHIFT - VARIABLE CALL
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/maps/map-set";
@import "aleksi/arglists/arglist-prepend";

@import "shift/context";
@import "shift/params/validate";
@import "shift/variable/align";

// =Functions
// =============================================================================

// =shift-call( $fn[, $context, $args... ])
// -----------------------------------------------------------------------------
/// Calls a given function with shift variable arguments. The function will be
/// called on each different value that is defined in the arguments.
/// **Note**: If regular arguments are passed, they will be transformed into
/// shift variables by scoping them to the current context.
///
/// @param $fn - the transforming function.
/// @param $context [shift-context] - the context to scope
/// @param $args - the arguments to pass to $fn
///
/// @return {map} - a shift variable representing the different values returned by fn
///
/// @api public
/// @since 0.3.0

@function shift-call($fn, $context: shift-context(), $args...)
{
  // allow omitting the $context argument
  @if not shift-validate-params($context)
  {
    $args: arglist-prepend($args, $context);
    $context: shift-context();
  }

  // initialize resulting shift variable
  $res: ();

  // align all arguments and get list of shared keys
  $args: shift-align-variables($args, $context);
  $keys: map-keys(nth($args, 1));

  // call transforming function with values for each key
  @each $key in $keys
  {
    // collect values for this key in each argument
    $key-args: ();
    @each $arg in $args {
      $key-args: append($key-args, map-get($arg, $key));
    }

    // call given function with values for this key
    $key-val: call($fn, $key-args...);

    // add it to resulting shift value
    $res: map-set($res, $key, $key-val);
  }

  @return $res;
}