// =SHIFT - VARIABLE REDUCE
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/throw";
@import "aleksi/general/memo";
@import "aleksi/general/default-to";
@import "aleksi/lists/remove-nth";
@import "aleksi/lists/replace-nth";
@import "aleksi/maps/map-set";
@import "aleksi/maps/map-insert";
@import "aleksi/maps/map-replace-nth";

@import "shift/length/intervals";
@import "shift/params/expression";
@import "shift/variable/validate";
@import "shift/variable/parse-keys";
@import "shift/variable/key-lengths";
@import "shift/variable/computed-value";
@import "shift/context";

// =Functions
// =============================================================================

// =shift-reduce-variable( $var )
// -----------------------------------------------------------------------------
/// Reduces a shift variable that was previously expanded using
/// 'shift-expand-variable', so it uses the least keys as possible.
///
/// @param {map} $var - the shift variable to reduce
/// @return {map} - a reduced copy of $var, with least keys being used
///
/// @api public
/// @since 0.3.0

@function shift-reduce-variable( $var, $context: shift-context() )
{
  // memoization
  $_memo_: 'shift-reduce-variable-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  // only accept valid shift variables
  @if not shift-validate-variable($var) {
    @return throw-error('shift-reduce-variable(): `$var` must be a valid shift variable – was `#{inspect($var)}`');
  }

  // reduce intervals from variable keys
  $res: shift-reduce-intervals($var);

  // get default value (defaults to prevailing value)
  $df: '__none__';
  $df-key: shift-expression($context);

  @if map-has-key($var, $df-key) {
    $df: map-get($var, 'df');
  } @else {
    $df: shift-prevailing-value($var);
  }

  // remove other keys defining the default value
  @each $key, $val in $res
  {
    @if $val == $df {
      $res: map-remove($res, $key);
    }
  }

  // add default value at the beginning of reduced copy
  @if $df != '__none__'
  {
    $df-entry: map-set((), $df-key, $df);
    $res: if(length($res) == 0, $df-entry, map-insert($res, 1, $df-entry));
  }

  // remove values that won't be computed
  $res: shift-reduce-values($res);

  // @debug "shift-reduce-variable()$var[values]:: " + inspect($var);

  // remove useless 'max-' lengths in variable keys
  $res: shift-reduce-keys($res);

  // @debug "shift-reduce-variable()$var[keys]:: " + inspect($var);

  @return memo-set('shift', $_memo_, $res);
}

// =shift-prevailing-value( $var )
// -----------------------------------------------------------------------------
/// Returns the value that occurs the most often in given shift variable. If all
/// values occur the same amount of times, the first value will be returned.
///
/// @param {map} $var - the shift variable to inspect
///
/// @return {any} the prevailing value in $var
/// @throw Error - if $var is not a shift variable
///
/// @api public
/// @since 0.3.0

@function shift-prevailing-value($var)
{
  $most: '__none__';
  $vals: map-values($var);
  $counts: ();

  @if not shift-validate-variable($var) {
    @return throw-error('shift-prevailing-value() $var must be a valid shift variable – was #{inspect($var)}');
  }

  @each $val in $vals
  {
    // use index of first occurence of value as key
    $key: '#{index($vals, $val)}';

    // update count for value
    $count: default-to(map-get($counts, $key), 0) + 1;
    $counts: map-set($counts, $key, $count);

    // update default value
    @if $most == '__none__'
      or $count > map-get($counts, '#{index($vals, $most)}')
    {
      $most: $val;
    }
  }

  @return $most;
}

// =shift-reduce-keys( $var )
// -----------------------------------------------------------------------------
/// Reduces keys from given shift variable.
///
/// @return {map} - the shift variable with reduced intervals
/// @throw Error - if $var is not a shift variable
///
/// @api public
/// @since 0.3.0

@function shift-reduce-keys( $var )
{
  $_memo_: 'shift-reduce-keys-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  $keys: map-keys($var);
  $values: map-values($var);
  $params: map-values(shift-parse-keys($var));

  // compare each entry with next one
  $i: 1;
  $ln: length($var);

  $res: ();

  @while $i < $ln
  {
    $key: nth($keys, $i);
    $val: nth($values, $i);

    $prm: nth($params, $i);
    $min-w: map-get($prm, 'min-width');
    $max-w: map-get($prm, 'max-width');
    $min-h: map-get($prm, 'min-height');
    $max-h: map-get($prm, 'max-height');

    $next-key: nth($keys, $i + 1);
    $next-prm: nth($params, $i + 1);
    $next-min-w: map-get($next-prm, 'min-width');
    $next-max-w: map-get($next-prm, 'max-width');
    $next-min-h: map-get($next-prm, 'min-height');
    $next-max-h: map-get($next-prm, 'max-height');

    // if keys are compatible and width intervals follow-up
    @if $min-w and $max-w and
      default-to($min-h, 0) == default-to($next-min-h, 0)
      and default-to($max-h, 999999) == default-to($next-max-h, 999999)
      and default-to($max-w, 999999) >= default-to($next-min-w, 0)
      and default-to($max-w, 999999) <= default-to($next-max-w, 999999)
    {
      // remove 'max-width' from key
      $prm: map-remove($prm, 'max-width');
    }

    // if keys are compatible and height intervals follow-up
    @if $min-h and $max-h and
      default-to($min-w, 0) == default-to($next-min-w, 0)
      and default-to($max-w, 999999) == default-to($next-max-w, 999999)
      and default-to($max-h, 999999) >= default-to($next-min-h, 0)
      and default-to($max-h, 999999) <= default-to($next-max-h, 999999)
    {
      // remove 'max-height' from key
      $prm: map-remove($prm, 'max-height');
    }

    $key: shift-expression($prm);
    $res: map-set($res, $key, $val);

    $i: $i + 1;
  }

  // re-inject last value
  $res: map-set($res, nth($keys, $ln), nth($values, $ln));

  @return memo-set('shift', $_memo_, $res);
}

// =shift-reduce-intervals( $var )
// -----------------------------------------------------------------------------
/// Reduces 'min-/max-' intervals in keys from given shift variable.
///
/// @return {map} - the shift variable with reduced intervals
/// @throw Error - if $var is not a shift variable
///
/// @api public
/// @since 0.3.0

@function shift-reduce-intervals( $var )
{
  $_memo_: 'shift-reduce-intervals-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  $values: map-values($var);
  $params: map-values(shift-parse-keys($var));

  // compare each entry with next one
  $i: 1;
  $ln: length($var);

  @while $i < $ln
  {
    $next-i: $i + 1;
    $val: nth($values, $i);
    $next-val: nth($values, $next-i);

    $merge: false;

    @if $val == $next-val
    {
      // candidate for merging
      $prm: nth($params, $i);
      $min-w: map-get($prm, 'min-width');
      $max-w: map-get($prm, 'max-width');
      $min-h: map-get($prm, 'min-height');
      $max-h: map-get($prm, 'max-height');

      $next-prm: nth($params, $next-i);
      $next-min-w: map-get($next-prm, 'min-width');
      $next-max-w: map-get($next-prm, 'max-width');
      $next-min-h: map-get($next-prm, 'min-height');
      $next-max-h: map-get($next-prm, 'max-height');

      $merged: $prm;

      // if keys are compatible and width intervals follow-up
      @if default-to($min-h, 0) == default-to($next-min-h, 0)
        and default-to($max-h, 999999) == default-to($next-max-h, 999999)
        and default-to($max-w, 999999) >= default-to($next-min-w, 0)
      {
        // merge them by expanding max-w
        $merge: true;
        $merged: map-merge($merged, (
          'max-width': $next-max-w
        ));
      }

      // if keys are compatible and height intervals follow-up
      @if default-to($min-w, 0) == default-to($next-min-w, 0)
        and default-to($max-w, 999999) == default-to($next-max-w, 999999)
        and default-to($max-h, 999999) >= default-to($next-min-h, 0)
      {
        // merge them by expanding max-h
        $merge: true;
        $merged: map-merge($merged, (
          'max-height': $next-max-h
        ));
      }

      @if $merge == true
      {
        // remove next interval
        $values: remove-nth($values, $next-i);
        $params: remove-nth($params, $next-i);
        $ln: $ln - 1;

        // and replace current one with expanded one
        $params: replace-nth($params, $i, $merged);
      }
    }

    @else if $merge == false {
      // move on..
      $i: $i + 1;
    }
  }

  // build reduced copy of the variable based on new intervals
  $res: ();

  @for $i from 1 through $ln
  {
    $prm: nth($params, $i);
    $val: nth($values, $i);
    
    $res: map-set($res, shift-expression($prm), $val);
  }

  @return memo-set('shift', $_memo_, $res);
}

// =shift-reduce-values( $var )
// -----------------------------------------------------------------------------
/// Removes values that will never be used in the final CSS.
///
/// @return {map} - the shift variable with reduced values
/// @throw Error - if $var is not a shift variable
///
/// @api public
/// @since 0.3.0

@function shift-reduce-values($var)
{
  $_memo_: 'shift-reduce-values-#{$var}';
  @if memo-has('shift', $_memo_) {
    @return memo-get('shift', $_memo_);
  }

  @if not shift-validate-variable($var) {
    @return throw-error('shift-reduce-values(): `$var` must be a valid shift variable – was `#{inspect($var)}`');
  }

  // list all possible intervals
  $key-lengths: shift-key-lengths($var);
  $widths: shift-list-values('width');
  $heights: shift-list-values('height');

  // inject arbitrary key lengths into registered lengths
  @each $w in map-get($key-lengths, 'widths') {
    @if not index($widths, $w) { $widths: append($widths, $w); }
  }
  @each $h in map-get($key-lengths, 'heights') {
    @if not index($heights, $h) { $heights: append($heights, $h); }
  }

  // get list of all possible intervals for relevant lengths
  $intervals: shift-length-intervals((
    'widths': $widths,
    'heights': $heights
  ));

  // collect values that will be used
  $values: ();
  @each $interval in $intervals
  {
    $val: _shift-computed-value($var, $interval);
    @if index($values, $val) == null {
      $values: append($values, $val);
    }
  }

  // rebuild a variable without irrelevant values
  $reduced: ();

  @each $key, $val in $var
  {
    @if index($values, $val) != null {
      $reduced: map-set($reduced, $key, $val);
    }
  }

  @return memo-set('shift', $_memo_, $reduced);
}
