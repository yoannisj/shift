// =SHIFT - VARIABLE REDUCE
// =============================================================================
///
//// @group shift-variable
//// @author [Yoannis Jamar](http://yoannis.com)

@import "aleksi/general/throw";
@import "aleksi/general/default-to";
@import "aleksi/lists/remove-nth";
@import "aleksi/lists/replace-nth";
@import "aleksi/maps/map-set";
@import "aleksi/maps/map-insert";

@import "shift/params/expression";
@import "shift/variable/validate";
@import "shift/variable/parse-keys";

// =Functions
// =============================================================================

// =shift-reduce-variable( $var )
// -----------------------------------------------------------------------------
/// Reduces a shift variable that was previously expanded using
/// 'shift-expand-variable', so it uses the least keys as possible.
///
/// @param {map} $var - the shift variable to reduce
/// @return {map} - a reduced copy of $var, with least keys being used
///
/// @api public
/// @since 0.3.0

@function shift-reduce-variable( $var )
{
  // only accept valid shift variables
  @if not shift-validate-variable($var) {
    @return throw-error('shift-expand-variable(): $var must be a valid shift variable â€“ was #{inspect($var)}.');
  }

  // reduce intervals from variable
  $res: _shift-reduce-intervals($var);

  // get default value (defaults to prevailing value)
  $df: '__none__';
  @if map-has-key($var, 'df') {
    $df: map-get($var, 'df');
  } @else {
    $df: _shift-prevailing-value($var);
  }

  // add default value at the beginning of reduced copy
  $res: map-insert($res, 1, ('df': $df));

  @return $res;
}

// =_shift-prevailing-value( $var )
// -----------------------------------------------------------------------------
/// Returns the value that occurs the most often in given shift variable. If all
/// values occur the same amount of times, the first value will be returned.
///
/// @param {map} $var - the shift variable to inspect
///
/// @return {any} the prevailing value in $var
/// @throw Error - if $var is not a shift variable
///
/// @api private
/// @since 0.3.0

@function _shift-prevailing-value($var)
{
  $most: '__none__';
  $vals: map-values($var);
  $counts: ();

  @each $val in $vals
  {
    // use index of first occurence of value as key
    $key: index($vals, $val);

    // update count for value
    $count: default-to(map-get($counts, $key), 0) + 1;
    $counts: map-set($counts, $key, $count);

    // update default value
    @if $most == '__none__'
      or $count > map-get($counts, index($vals, $most))
    {
      $most: $val;
    }
  }

  @return $most;
}

// =_shift-reduce-intervals( $var )
// -----------------------------------------------------------------------------
/// Reduces 'min-/max-' intervals in keys from given shift variable.
///
/// @return {map} - the shift variable with reduced intervals
/// @throw Error - if $var is not a shift variable
///
/// @api private
/// @since 0.3.0

@function _shift-reduce-intervals( $var )
{
  $values: map-values($var);
  $params: map-values(shift-parse-keys($var));

  // compare each entry with next one
  $i: 1;
  $ln: length($var);

  @while $i < $ln
  {
    $next-i: $i + 1;

    $val: nth($values, $i);
    $next-val: nth($values, $next-i);

    $merge: false;

    @if $val == $next-val
    {
      // candidate for merging
      $prm: nth($params, $i);
      $min-w: map-get($prm, 'min-width');
      $max-w: map-get($prm, 'max-width');
      $min-h: map-get($prm, 'min-height');
      $max-h: map-get($prm, 'max-height');

      $next-prm: nth($params, $next-i);
      $next-min-w: map-get($next-prm, 'min-width');
      $next-max-w: map-get($next-prm, 'max-width');
      $next-min-h: map-get($next-prm, 'min-height');
      $next-max-h: map-get($next-prm, 'max-height');

      $merged: $prm;

      // if keys are compatible and width intervals follow-up
      @if default-to($min-h, 0) == default-to($next-min-h, 0)
        and default-to($max-h, 999999) == default-to($next-max-h, 999999)
        and default-to($max-w, 999999) >= default-to($next-min-w, 0)
      {
        // merge them by expanding max-w
        $merge: true;
        $merged: map-merge($merged, (
          'max-width': $next-max-w
        ));
      }

      // if keys are compatible and height intervals follow-up
      @if default-to($min-w, 0) == default-to($next-min-w, 0)
        and default-to($max-w, 999999) == default-to($next-max-w, 999999)
        and default-to($max-h, 999999) >= default-to($next-min-h, 0)
      {
        // merge them by expanding max-h
        $merge: true;
        $merged: map-merge($merged, (
          'max-height': $next-max-h
        ));
      }

      @if $merge == true
      {
        // remove next interval
        $values: remove-nth($values, $next-i);
        $params: remove-nth($params, $next-i);
        $ln: $ln - 1;

        // and replace current one with expanded one
        $params: replace-nth($params, $i, $merged);
      }
    }

    @else if $merge == false {
      // move on..
      $i: $i + 1;
    }
  }

  // build reduced copy of the variable based on new intervals
  $res: ();

  @for $i from 1 through $ln
  {
    $prm: nth($params, $i);
    $val: nth($values, $i);
    
    $res: map-set($res, shift-expression($prm), $val);
  }

  @return $res;
}