// =============================================================================
// =SHIFT TESTS - LENGTH PARSE
// =============================================================================

@import "shift/length/parse";

$__shift__: (
  'breakpoints': (
    'width': (
      's': 400px,
      'm': 760px,
      'l': 920
    ),
    'height': (
      's': 500px,
      'l': 720
    )
  ),
  'tweakpoints': (
    'narrow': (
      'width': (
        's': 340px,
        'l': 820
      ),
      'height': (
        'l': 600px
      )
    )
  )
) !global;

@include test-module('The shift-parse-length function')
{
  @include test('should accept a number, and convert it into a px length')
  {
    @include assert-equal(shift-parse-length(680), 680px);
    @include assert-equal(shift-parse-length(30em), 480px);
  }

  @include test('should accept a number cast as a string, and convert it into a px length')
  {
    @include assert-equal(shift-parse-length('680px'), 680px);
    @include assert-equal(shift-parse-length('30em'), 480px);
  }

  @include test('should accept a shift label, and return the corresponding length')
  {
    @include assert-equal(shift-parse-length('m', 'width'), 760px);
    @include assert-equal(shift-parse-length('s', 'height'), 500px);
  }

  @include test('should default to the "width" feature when matching a label')
  {
    @include assert-equal(shift-parse-length('s'), 400px);
    @include assert-equal(shift-parse-length('l'), 920px);
  }

  @include test('should return given tweakpoint\'s length when matching a label')
  {
    @include assert-equal(shift-parse-length('s', 'width', 'narrow'), 340px);
    @include assert-equal(shift-parse-length('l', 'height', 'narrow'), 600px);
  }

  @include test('should return "null" if given string could not be cast to a number, nor matched with a breakpoint label') {
    @include assert-equal(shift-parse-length('foobar', 'width'), null);
  }

  @include test('should return "null" if "null" was given') {
    @include assert-equal(shift-parse-length(null), null);
  }

  // @include xtest('should throw an error if $value is not null, nor a number, nor a string') {
  //   @include assert-equal(shift-parse-length(true, 'width'));
  // }

  // @include xtest('should throw an error if $tweakpoint is not null, nor a string') {
  //   @include assert-equal(shift-parse-length(680, 'width', 10), null);
  // }
}