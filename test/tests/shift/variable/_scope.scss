// =============================================================================
// =SHIFT TESTS - VARIABLE SCOPE
// =============================================================================

@import "shift/variable/scope";

$__shift__: (
  'breakpoints': (
    'width': (
      's': 400px,
      'm': 760px,
      'l': 920
    ),
    'height': (
      's': 500px,
      'l': 720
    )
  ),
  'tweakpoints': (
    'narrow': (
      'width': (
        's': 340px,
        'l': 820
      ),
      'height': (
        'l': 600px
      )
    )
  )
) !global;

$shift-strict-queries: false !global;
$shift-media-type: 'screen' !global;

@include test-module('the shift-scope-variable function')
{
  $var-a: (
    'df': 5,
    's_m': 10,
    'm_l': 20,
    'l': 30
  );

  $var-b: (
    'm_l': red,
    'l': blue
  );

  $var-c: (
    '_s': true,
    's_m': false,
    'm': true
  );

  $context-df: ();

  $context-_m: (
    'max-width': 760px
  );

  $context-s_l: (
    'min-width': 400px,
    'max-width': 920px
  );

  $var-a-df: (
    'df': 5,
    'w>400px w<760px': 10,
    'w>760px w<920px': 20,
    'w>920px': 30
  );

  $var-b-df: (
    'w>760px w<920px': red,
    'w>920px': blue
  );

  $var-a-_m: (
    'w<760px': 5,
    'w>400px w<760px': 10
  );

  $var-a-s_l: (
    'w>400px w<760px': 10,
    'w>760px w<920px': 20
  );

  $var-c-s_l: (
    'w>400px w<760px': false,
    'w>760px w<920px': true
  );

  @include test('should remove keys that are out of scope from given shift variable')
  {
    $scoped: shift-scope-variable($var-a, $context-_m);
    @include assert-equal(map-has-key($scoped, 'w>920px'), false);
    @include assert-equal($scoped, $var-a-_m);
  }

  @include test('should leave shift variables untouched in default context')
  {
    @include assert-equal(shift-scope-variable($var-a, $context-df), $var-a-df);
    @include assert-equal(shift-scope-variable($var-b, $context-df), $var-b-df);
  }

  @include test('should default to current context')
  {
    // set custom context
    $context-before: map-get($__shift__, 'context');
    $__shift__: map-set($__shift__, 'context', $context-s_l) !global;

    @include assert-equal(shift-scope-variable($var-a), $var-a-s_l);
    @include assert-equal(shift-scope-variable($var-c), $var-c-s_l);

    // restore context
    $__shift__: map-set($__shift__, 'context', $context-before) !global;
  }

  // @debug "##############################";
}