// =============================================================================
// =SHIFT TESTS - PARSE
// =============================================================================

@import "shift/parse";

@include test-module('the _shift-parse function')
{
  @include test('should default to shift-strict-queries and shift-media-type')
  {
    @include assert-equal( shift-parse(''), $default-params );
  }

  @include test('should accept a media-query parameters map')
  {
    $params: ('min-width': 's', 'max-height': 'm');
    $result: $width-from-s-height-to-m-params;
    @include assert-equal( shift-parse($params), $result );
  }

  @include test('should allow to give values on the fly using a media-query parameters map')
  {
    $params: ('min-width': 320px, 'max-height': 25em);
    $result: (
      'media-type': $shift-media-type,
      'strict-query': $shift-strict-queries,
      'min-width': 320px,
      'max-height': 25em
    );
    @include assert-equal( shift-parse($params), $result );

    $params: ('min-width': 580px, 'max-height': 's', 'media-type': 'handheld');
    $result: ('strict-query': $shift-strict-queries, 'media-type': 'handheld', 'min-width': 580px, 'max-height': 500px, 'max-height-label': 's');
    @include assert-equal( shift-parse($params), $result );
  }

  @include test('should accept a shift expression')
  {
    @include assert-equal( shift-parse($from-s-to-l-expr), $from-s-to-l-params );
    @include assert-equal( shift-parse($width-to-l-expr), $width-to-l-params );
    @include assert-equal( shift-parse($both-from-s-to-m-expr), $both-from-s-to-m-params );
  }

  @include test('should recognize the greater-than character to describe a min- features')
  {
    @include assert-equal( shift-parse($from-s-expr), $from-s-params );
    @include assert-equal( shift-parse($from-l-expr), $from-l-params );
  }

  @include test('should recognize the littler-than character to describe a max- features')
  {
    @include assert-equal( shift-parse($to-m-expr), $to-m-params );
  }

  @include test('should recognize the w character to describe a width feature')
  {
    @include assert-equal( shift-parse($w-from-s-expr), $width-from-s-params );
    @include assert-equal( shift-parse($w-to-l-expr), $width-to-l-params );
  }

  @include test('should recognize the h character to describe a height feature')
  {
    @include assert-equal( shift-parse($h-from-m-expr), $height-from-m-params );
    @include assert-equal( shift-parse($h-to-s-expr), $height-to-s-params );
  }

  @include test('should recognize the width keyword')
  {
    @include assert-equal( shift-parse($width-from-s-expr), $width-from-s-params );
    @include assert-equal( shift-parse($width-to-l-expr), $width-to-l-params );
  }

  @include test('should recognize the height keyword')
  {
    @include assert-equal( shift-parse($height-from-m-expr), $height-from-m-params );
    @include assert-equal( shift-parse($height-to-s-expr), $height-to-s-params );
  }

  @include test('should support the only keyword for strict queries')
  {
    @include assert-equal( shift-parse($strict-from-s-expr), $strict-from-s-params );
    @include assert-equal( shift-parse($strict-from-s-width-to-l-expr), $strict-from-s-width-to-l-params );
  }

  @include test('should support custom media-types')
  {
    @include assert-equal( shift-parse($print-from-s-expr), $print-from-s-params );
  }

  @include test('should allow to combine features with spaces')
  {
    @include assert-equal( shift-parse($from-s-to-l-expr), $from-s-to-l-params );
    @include assert-equal( shift-parse($width-from-s-height-to-m-expr), $width-from-s-height-to-m-params );
  }

  @include test('should allow to combine features with the and keyword')
  {
    @include assert-equal( shift-parse($from-s-to-l-expr-and), $from-s-to-l-params );
    @include assert-equal( shift-parse($print-from-s-expr-and), $print-from-s-params );
    @include assert-equal( shift-parse($width-from-s-height-to-m-expr-and), $width-from-s-height-to-m-params );
  }

  @include test('should support combining min- and max- features')
  {
    @include assert-equal( shift-parse($from-s-to-l-expr), $from-s-to-l-params );
    @include assert-equal( shift-parse($from-s-to-l-expr), $from-s-to-l-params );
  }

  @include test('should support combining width and height features')
  {
    @include assert-equal( shift-parse($width-from-s-height-to-m-expr), $width-from-s-height-to-m-params );
    @include assert-equal( shift-parse($both-from-s-to-m-expr), $both-from-s-to-m-params );
  }

  @include test('should use tweakpoint values when a tweakpoint argument is passed')
  {
    @include assert-equal( shift-parse($foo-from-s-expr, 'foo'), $foo-from-s-params );
    @include assert-equal( shift-parse($foo-from-s-to-l-expr, 'foo'), $foo-from-s-to-l-params );
  }

  // @include xtest('should throw an error when passed an expression with the not keyword')
  // {
  //   @include assert-equal( shift-parse('not >s'), null );
  //   @include assert-equal( shift-parse('not screen'), null );
  // }

  // @include xtest('should throw an error when passed multiple, comma-separated query expressions')
  // {
  //   @include assert-equal( shift-parse('screen <l, print >s'), null );
  //   @include assert-equal( shift-parse('>s, h>s h<m'), null );
  // }
}