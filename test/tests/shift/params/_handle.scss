// =============================================================================
// =SHIFT TESTS - HANDLE
// =============================================================================

@import "shift/params/handle";
@import "aleksi/general/const";

$__shift__: (
  'breakpoints': (
    'width': (
      's': 400px,
      'm': 760px,
      'l': 920
    ),
    'height': (
      's': 500px,
      'l': 720
    )
  ),
  'tweakpoints': (
    'narrow': (
      'width': (
        's': 340px,
        'l': 820
      ),
      'height': (
        'l': 600px
      )
    )
  )
) !global;

@include test-module('The shift-handle function')
{
  @include test('should build a handle string for given shift parameters')
  {
    $handle-a: 's';
    $params-a: (
      'strict': true,
      'min-width': 's'
    );

    $handle-b: '400_920-500';
    $params-b: (
      'media': 'print',
      'min-width': 400,
      'max-width': 920,
      'min-height': 500
    );

    $handle-c: 's-_l';
    $params-c: (
      'min-width': 's',
      'max-height': 'l'
    );

    @include assert-equal(shift-handle($params-a), $handle-a);
    @include assert-equal(shift-handle($params-b), $handle-b);
    @include assert-equal(shift-handle($params-c), $handle-c);
  }

  @include test('should allow to mix labels and length values')
  {
    $handle-a: 'm_920-s';
    $params-a: (
      'media': 'print',
      'min-width': 'm',
      'max-width': 920,
      'min-height': 's'
    );

    $handle-b: '400-_l';
    $params-b: (
      'min-width': 400,
      'max-height': 'l'
    );

    @include assert-equal(shift-handle($params-a), $handle-a);
    @include assert-equal(shift-handle($params-b), $handle-b);
  }

  @include test('should return the "df" string if given $params is empty or doesn\'t contain valid shift params')
  {
    $no-valid-params: ('foo': 300, 'bar': 800);

    @include assert-equal(shift-handle(()), 'df');
    @include assert-equal(shift-handle($no-valid-params), 'df');
  }

  // @include test('should throw an error if $params is not a map') {
  //   @include assert-equal(shift-handle(true), null);
  // }
}

@include test-module('The shift-validate-handle function')
{
  @include test('should recognize strings with forbidden characters as invalid')
  {
    // forbid all characters that are forbidden in CSS classnames
    @include assert-equal(shift-validate-handle('s m'), false);
    @include assert-equal(shift-validate-handle('[s]'), false);
    @include assert-equal(shift-validate-handle('(l)'), false);
    @include assert-equal(shift-validate-handle('{l}'), false);
    @include assert-equal(shift-validate-handle('/l'), false);
    @include assert-equal(shift-validate-handle('\\m'), false);
    @include assert-equal(shift-validate-handle('&m'), false);
    @include assert-equal(shift-validate-handle('@m'), false);
    @include assert-equal(shift-validate-handle('^l'), false);
    @include assert-equal(shift-validate-handle('`l'), false);
    @include assert-equal(shift-validate-handle('s?'), false);
    @include assert-equal(shift-validate-handle('l!'), false);
    @include assert-equal(shift-validate-handle('|l'), false);
    @include assert-equal(shift-validate-handle('s+'), false);
    @include assert-equal(shift-validate-handle('l:'), false);
    @include assert-equal(shift-validate-handle('m;'), false);
    @include assert-equal(shift-validate-handle('>m'), false);
    @include assert-equal(shift-validate-handle('<l'), false);
    @include assert-equal(shift-validate-handle('s;'), false);
    @include assert-equal(shift-validate-handle('#m'), false);
    @include assert-equal(shift-validate-handle('s%'), false);
  }

  @include test('should recognize min-width handles')
  {
    @include assert-equal(shift-validate-handle('s'), true);
    @include assert-equal(shift-validate-handle('m_'), true);
  }

  @include test('should recognize max-width handles')
  {
    @include assert-equal(shift-validate-handle('_m'), true);
    @include assert-equal(shift-validate-handle('_l'), true);
  }

  @include test('should recognize min-height handles')
  {
    @include assert-equal(shift-validate-handle('-s'), true);
    @include assert-equal(shift-validate-handle('-m_'), true);
  }

  @include test('should recognize max-height handles')
  {
    @include assert-equal(shift-validate-handle('-_m'), true);
    @include assert-equal(shift-validate-handle('-_l'), true);
  }

  @include test('should validate handles with arbitrary length values')
  {
    @include assert-equal(shift-validate-handle('630'), true);
    @include assert-equal(shift-validate-handle('340_'), true);
    @include assert-equal(shift-validate-handle('_920'), true);

    @include assert-equal(shift-validate-handle('-_533'), true);
    @include assert-equal(shift-validate-handle('-348_'), true);

    @include assert-equal(shift-validate-handle('32em_'), true);
    @include assert-equal(shift-validate-handle('-_28em'), true);
  }

  @include test('should recognize range handles')
  {
    @include assert-equal(shift-validate-handle('s_m'), true);
    @include assert-equal(shift-validate-handle('-m_l'), true);
  }

  @include test('should not validate handles with unregistered labels')
  {
    @include assert-equal(shift-validate-handle('foo'), false);
    @include assert-equal(shift-validate-handle('bar_'), false);

    @include assert-equal(shift-validate-handle('_xl'), false);
    @include assert-equal(shift-validate-handle('_baz'), false);

    @include assert-equal(shift-validate-handle('-q'), false);
    @include assert-equal(shift-validate-handle('-z_'), false);
    @include assert-equal(shift-validate-handle('-_xl'), false);
  }

  @include test('should recognize combined handles')
  {
    @include assert-equal(shift-validate-handle('s-_m'), true);
    @include assert-equal(shift-validate-handle('s_m-_l'), true);
    @include assert-equal(shift-validate-handle('s_l-s_m'), true);

    // and also invalid parts in the combined expression
    @include assert-equal(shift-validate-handle('foo_-_l'), false);
    @include assert-equal(shift-validate-handle('_l-foobar'), false);
    @include assert-equal(shift-validate-handle('bar_740'), false);
  }
}