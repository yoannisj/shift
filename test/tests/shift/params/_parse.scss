// =============================================================================
// =SHIFT TESTS - PARSE
// =============================================================================

@import "shift/params/parse";

$__shift__: (
  'breakpoints': (
    'width': (
      's': 400px,
      'm': 760px,
      'l': 920
    ),
    'height': (
      's': 500px,
      'l': 720
    )
  ),
  'tweakpoints': (
    'narrow': (
      'width': (
        's': 340px,
        'l': 820
      ),
      'height': (
        'l': 600px
      )
    )
  )
) !global;

@include test-module('the shift-parse function')
{
  @include test('should replace breakpoint label values with parsed lengths in px')
  {
    $params-a: ('min-width': 's', 'max-height': 'l');
    $parsed-a: ('min-width': 400px, 'max-height': 720px);

    $params-b: ('min-width': 's', 'max-width': 'm', 'min-height': 's');
    $parsed-b: ('min-width': 400px, 'max-width': 760px, 'min-height': 500px);

    @include assert-equal( shift-parse($params-a), $parsed-a);
    @include assert-equal( shift-parse($params-b), $parsed-b);
  }

  @include test('should convert arbitrary length values into lengths in px')
  {
    $params-a: ('min-width': 25em, 'min-height': 500px);
    $parsed-a: ('min-width': 400px, 'min-height': 500px);
    
    $params-b: ('min-width': 400, 'max-height': 45rem);
    $parsed-b: ('min-width': 400px, 'max-height': 720px);

    @include assert-equal( shift-parse($params-a), $parsed-a );
    @include assert-equal( shift-parse($params-b), $parsed-b );
  }

  @include test('should accept a shift expression and return a parsed parameters map')
  {
    $expr-a: 'only w>s w<1024';
    $parsed-a: ('strict': true, 'min-width': 400px, 'max-width': 1024px);

    $expr-b: 'print and min-width:m w<l height > 440 h<32em';
    $parsed-b: (
      'media': 'print',
      'min-width': 760px,
      'max-width': 920px,
      'min-height': 440px,
      'max-height': 512px
    );

    @include assert-equal( shift-parse($expr-a), $parsed-a );
    @include assert-equal( shift-parse($expr-b), $parsed-b );
  }

  @include test('should accept a shift handle and return a parsed parameters map')
  {
    $handle-a: 's_1024';
    $parsed-a: ('min-width': 400px, 'max-width': 1024px);

    $handle-b: 'm_l-440_32em';
    $parsed-b: (
      'min-width': 760px,
      'max-width': 920px,
      'min-height': 440px,
      'max-height': 512px
    );

    @include assert-equal( shift-parse($handle-a), $parsed-a );
    @include assert-equal( shift-parse($handle-b), $parsed-b );
  }

  @include test('should return values from given $tweakpoint')
  {
    $params-a: ('media': 'print', 'min-width': 's', 'max-width': 'm');
    $parsed-a: ('media': 'print', 'min-width': 340px, 'max-width': 760px);

    $params-b: 'only w>s h<l';
    $parsed-b: ('strict': true, 'min-width': 340px, 'max-height': 600px);

    $params-c: 's_m-_l';
    $parsed-c: ('min-width': 340px, 'max-width': 760px, 'max-height': 600px);

    @include assert-equal( shift-parse($params-a, 'narrow'), $parsed-a );
    @include assert-equal( shift-parse($params-b, 'narrow'), $parsed-b );
    @include assert-equal( shift-parse($params-c, 'narrow'), $parsed-c );
  }

  // @include test('throw an error if $params is not a string, nor a map') {
  //   @include assert-equal(shift-parse(10), null);
  // }

  // @include test('should throw an error if $tweakpoint is not null, nor a string') {
  //   @include assert-equal(shift-parse((), true), null);
  // }
}